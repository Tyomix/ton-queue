
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract queue {

    string[] public names;

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();


    }

    function pushname (string name) public returns (uint) {
        tvm.accept();
        //adds item in the end of the queue
        names.push(name);
        //returns current array size
        return names.length;
        
    }

    function shiftname () public returns (uint) {
        tvm.accept();
        //removes item from the begining of the queue
        if (names.length==0) {return 0;}
        for (uint i = 0; i < names.length - 1; i++) {
            names[i] = names[i + 1];
          }
          
          names.pop();

        //returns current array size
        return names.length;
    }

    function getname (uint index) public returns (string) {
        tvm.accept();
        //shows # item
       
        return names[index];
    }

   
}
